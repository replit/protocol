// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: client.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Whether these limits are cachable, and if they are, by what facet of the token.
type ResourceLimits_Cachability int32

const (
	// Do not cache these limits.
	ResourceLimits_NONE ResourceLimits_Cachability = 0
	// These limits can be cached and applied to this and any of the user's
	// other repls.
	ResourceLimits_USER ResourceLimits_Cachability = 1
	// These limits can be cached and applied only to this repl.
	ResourceLimits_REPL ResourceLimits_Cachability = 2
)

// Enum value maps for ResourceLimits_Cachability.
var (
	ResourceLimits_Cachability_name = map[int32]string{
		0: "NONE",
		1: "USER",
		2: "REPL",
	}
	ResourceLimits_Cachability_value = map[string]int32{
		"NONE": 0,
		"USER": 1,
		"REPL": 2,
	}
)

func (x ResourceLimits_Cachability) Enum() *ResourceLimits_Cachability {
	p := new(ResourceLimits_Cachability)
	*p = x
	return p
}

func (x ResourceLimits_Cachability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceLimits_Cachability) Descriptor() protoreflect.EnumDescriptor {
	return file_client_proto_enumTypes[0].Descriptor()
}

func (ResourceLimits_Cachability) Type() protoreflect.EnumType {
	return &file_client_proto_enumTypes[0]
}

func (x ResourceLimits_Cachability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceLimits_Cachability.Descriptor instead.
func (ResourceLimits_Cachability) EnumDescriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{1, 0}
}

// Whether to persist filesystem, metadata, or both.
type ReplToken_Persistence int32

const (
	// This is the usual mode of operation: both filesystem and metadata will be
	// persisted.
	ReplToken_PERSISTENT ReplToken_Persistence = 0
	// The ephemeral flag indicates the repl being connected to will have a time
	// restriction on stored metadata.  This has the consequence that repl will
	// be unable to wakeup or serve static traffic once the metadata has timed
	// out. This option does NOT affect filesystem and other data persistence.
	//
	// For context, this value is used on the client when repls are created for:
	// - replrun
	// - guests
	// - anon users
	// - temp vnc repls
	// - users with non-verified emails
	ReplToken_EPHEMERAL ReplToken_Persistence = 1
	// This indicates that the repl being connected does not have the ability to
	// persist files or be woken up after the lifetime of this repl expires.
	//
	// For context, this value is used on the client when repls are created for:
	// - replrun
	// - guests
	// - language pages
	ReplToken_NONE ReplToken_Persistence = 2
)

// Enum value maps for ReplToken_Persistence.
var (
	ReplToken_Persistence_name = map[int32]string{
		0: "PERSISTENT",
		1: "EPHEMERAL",
		2: "NONE",
	}
	ReplToken_Persistence_value = map[string]int32{
		"PERSISTENT": 0,
		"EPHEMERAL":  1,
		"NONE":       2,
	}
)

func (x ReplToken_Persistence) Enum() *ReplToken_Persistence {
	p := new(ReplToken_Persistence)
	*p = x
	return p
}

func (x ReplToken_Persistence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplToken_Persistence) Descriptor() protoreflect.EnumDescriptor {
	return file_client_proto_enumTypes[1].Descriptor()
}

func (ReplToken_Persistence) Type() protoreflect.EnumType {
	return &file_client_proto_enumTypes[1]
}

func (x ReplToken_Persistence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplToken_Persistence.Descriptor instead.
func (ReplToken_Persistence) EnumDescriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3, 0}
}

// allows the client to choose a wire format.
type ReplToken_WireFormat int32

const (
	// The default wire format: Protobuf-over-WebSocket.
	ReplToken_PROTOBUF ReplToken_WireFormat = 0
	// Legacy protocol.
	//
	// Deprecated: Do not use.
	ReplToken_JSON ReplToken_WireFormat = 1
)

// Enum value maps for ReplToken_WireFormat.
var (
	ReplToken_WireFormat_name = map[int32]string{
		0: "PROTOBUF",
		1: "JSON",
	}
	ReplToken_WireFormat_value = map[string]int32{
		"PROTOBUF": 0,
		"JSON":     1,
	}
)

func (x ReplToken_WireFormat) Enum() *ReplToken_WireFormat {
	p := new(ReplToken_WireFormat)
	*p = x
	return p
}

func (x ReplToken_WireFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplToken_WireFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_client_proto_enumTypes[2].Descriptor()
}

func (ReplToken_WireFormat) Type() protoreflect.EnumType {
	return &file_client_proto_enumTypes[2]
}

func (x ReplToken_WireFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplToken_WireFormat.Descriptor instead.
func (ReplToken_WireFormat) EnumDescriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3, 1}
}

// This message constitutes the repl metadata and define the repl we're
// connecting to. All fields are required unless otherwise stated.
type Repl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Bucket   string `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Slug     string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	User     string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// (Optional) The replID of a repl to be used as the source filesystem. All
	// writes will still go to the actual repl. This is intended to be a
	// replacement for guest repls, giving us cheap COW semantics so all
	// connections can have a real repl.
	//
	// One exception:
	//
	// It's important to note that data is not implicitly copied from src to
	// dest. Only what is explicitly written when talking to pid1 (either
	// gcsfiles or snapshots) will persist. This makes it slightly different
	// than just forking.
	//
	// It's unclear what the behaviour should be if:
	// - the dest and src repl both exist
	// - the dest and src are the same
	// - we have an src but no dest
	// consider these unsupported/undefined for now.
	SourceRepl string `protobuf:"bytes,6,opt,name=sourceRepl,proto3" json:"sourceRepl,omitempty"`
}

func (x *Repl) Reset() {
	*x = Repl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repl) ProtoMessage() {}

func (x *Repl) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repl.ProtoReflect.Descriptor instead.
func (*Repl) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{0}
}

func (x *Repl) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Repl) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Repl) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Repl) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Repl) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Repl) GetSourceRepl() string {
	if x != nil {
		return x.SourceRepl
	}
	return ""
}

// The resource limits that should be applied to the Repl's container.
type ResourceLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the repl has network access.
	Net bool `protobuf:"varint,1,opt,name=net,proto3" json:"net,omitempty"`
	// The amount of RAM in bytes that this repl will have.
	Memory int64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// The number of cores that the container will be allowed to have.
	Threads float64 `protobuf:"fixed64,3,opt,name=threads,proto3" json:"threads,omitempty"`
	// The Docker container weight factor for the scheduler. Similar to the
	// `--cpu-shares` commandline flag.
	Shares float64 `protobuf:"fixed64,4,opt,name=shares,proto3" json:"shares,omitempty"`
	// The size of the disk in bytes.
	Disk  int64                      `protobuf:"varint,5,opt,name=disk,proto3" json:"disk,omitempty"`
	Cache ResourceLimits_Cachability `protobuf:"varint,6,opt,name=cache,proto3,enum=api.ResourceLimits_Cachability" json:"cache,omitempty"`
}

func (x *ResourceLimits) Reset() {
	*x = ResourceLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLimits) ProtoMessage() {}

func (x *ResourceLimits) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLimits.ProtoReflect.Descriptor instead.
func (*ResourceLimits) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceLimits) GetNet() bool {
	if x != nil {
		return x.Net
	}
	return false
}

func (x *ResourceLimits) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ResourceLimits) GetThreads() float64 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *ResourceLimits) GetShares() float64 {
	if x != nil {
		return x.Shares
	}
	return 0
}

func (x *ResourceLimits) GetDisk() int64 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *ResourceLimits) GetCache() ResourceLimits_Cachability {
	if x != nil {
		return x.Cache
	}
	return ResourceLimits_NONE
}

// Permissions allow tokens to perform certain actions.
type Permissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This token has permission to toggle the always on state of a container.
	// For a connection to send the AlwaysOn message, it must have this permission.
	ToggleAlwaysOn bool `protobuf:"varint,1,opt,name=toggleAlwaysOn,proto3" json:"toggleAlwaysOn,omitempty"`
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{2}
}

func (x *Permissions) GetToggleAlwaysOn() bool {
	if x != nil {
		return x.ToggleAlwaysOn
	}
	return false
}

// ReplToken is the expected client options during the handshake. This is encoded
// into the token that is used to connect using WebSocket.
type ReplToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issue timestamp. Equivalent to JWT's "iat" (Issued At) claim.  Tokens with
	// no `iat` field will be treated as if they had been issed at the UNIX epoch
	// (1970-01-01T00:00:00Z).
	Iat *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=iat,proto3" json:"iat,omitempty"`
	// Expiration timestamp. Equivalent to JWT's "exp" (Expiration Time) Claim.
	// If unset, will default to one hour after `iat`.
	Exp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=exp,proto3" json:"exp,omitempty"`
	// An arbitrary string that helps prevent replay attacks by ensuring that all
	// tokens are distinct.
	Salt string `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	// The cluster that a repl is located in. This prevents replay attacks in
	// which a user is given a token for one cluster and then presents that same
	// token to a conman instance in another token, which could lead to a case
	// where multiple containers are associated with a repl.
	//
	// Conman therefore needs to validate that this parameter matches the
	// `-cluster` flag it was started with.
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Whether to persist filesystem, metadata, or both.  When connecting to an
	// already running/existing repl, its settings will be updated to match this
	// mode.
	Persistence ReplToken_Persistence `protobuf:"varint,6,opt,name=persistence,proto3,enum=api.ReplToken_Persistence" json:"persistence,omitempty"`
	// One of the three ways to identify a repl in goval.
	//
	// Types that are assignable to Metadata:
	//	*ReplToken_Repl
	//	*ReplToken_Id
	//	*ReplToken_Classroom
	Metadata isReplToken_Metadata `protobuf_oneof:"metadata"`
	// The resource limits for the container.
	ResourceLimits *ResourceLimits      `protobuf:"bytes,10,opt,name=resourceLimits,proto3" json:"resourceLimits,omitempty"`
	Format         ReplToken_WireFormat `protobuf:"varint,12,opt,name=format,proto3,enum=api.ReplToken_WireFormat" json:"format,omitempty"`
	Presenced      *ReplToken_Presenced `protobuf:"bytes,13,opt,name=presenced,proto3" json:"presenced,omitempty"`
	// Flags are handy for passing arbitrary configs along. Mostly used so
	// the client can try out new features
	Flags       []string     `protobuf:"bytes,14,rep,name=flags,proto3" json:"flags,omitempty"`
	Permissions *Permissions `protobuf:"bytes,15,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *ReplToken) Reset() {
	*x = ReplToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplToken) ProtoMessage() {}

func (x *ReplToken) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplToken.ProtoReflect.Descriptor instead.
func (*ReplToken) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3}
}

func (x *ReplToken) GetIat() *timestamppb.Timestamp {
	if x != nil {
		return x.Iat
	}
	return nil
}

func (x *ReplToken) GetExp() *timestamppb.Timestamp {
	if x != nil {
		return x.Exp
	}
	return nil
}

func (x *ReplToken) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *ReplToken) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ReplToken) GetPersistence() ReplToken_Persistence {
	if x != nil {
		return x.Persistence
	}
	return ReplToken_PERSISTENT
}

func (m *ReplToken) GetMetadata() isReplToken_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *ReplToken) GetRepl() *Repl {
	if x, ok := x.GetMetadata().(*ReplToken_Repl); ok {
		return x.Repl
	}
	return nil
}

func (x *ReplToken) GetId() *ReplToken_ReplID {
	if x, ok := x.GetMetadata().(*ReplToken_Id); ok {
		return x.Id
	}
	return nil
}

// Deprecated: Do not use.
func (x *ReplToken) GetClassroom() *ReplToken_ClassroomMetadata {
	if x, ok := x.GetMetadata().(*ReplToken_Classroom); ok {
		return x.Classroom
	}
	return nil
}

func (x *ReplToken) GetResourceLimits() *ResourceLimits {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *ReplToken) GetFormat() ReplToken_WireFormat {
	if x != nil {
		return x.Format
	}
	return ReplToken_PROTOBUF
}

func (x *ReplToken) GetPresenced() *ReplToken_Presenced {
	if x != nil {
		return x.Presenced
	}
	return nil
}

func (x *ReplToken) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ReplToken) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type isReplToken_Metadata interface {
	isReplToken_Metadata()
}

type ReplToken_Repl struct {
	// This is the standard connection behavior. If the repl doesn't exist it
	// will be created. Any future connections with a matching ID will go to
	// the same container. If other metadata mismatches besides ID it will be
	// rectified (typically by recreating the container to make it match the
	// provided value).
	Repl *Repl `protobuf:"bytes,7,opt,name=repl,proto3,oneof"`
}

type ReplToken_Id struct {
	// The repl must already be known to goval, the connection will proceed
	// with the Repl metadata from a previous connection's metadata with the
	// same ID.
	Id *ReplToken_ReplID `protobuf:"bytes,8,opt,name=id,proto3,oneof"`
}

type ReplToken_Classroom struct {
	// This is DEPRECATED and only used by the classroom. This will never share
	// a container between connections. Please don't use this even for tests,
	// we intend to remove it soon.
	//
	// Deprecated: Do not use.
	Classroom *ReplToken_ClassroomMetadata `protobuf:"bytes,9,opt,name=classroom,proto3,oneof"`
}

func (*ReplToken_Repl) isReplToken_Metadata() {}

func (*ReplToken_Id) isReplToken_Metadata() {}

func (*ReplToken_Classroom) isReplToken_Metadata() {}

// GovalTokenMetadata is information about a goval token, that can be used to
// validate it. It is stored in the footer of the PASETO.
type GovalTokenMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the key that was used to sign the token.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GovalTokenMetadata) Reset() {
	*x = GovalTokenMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovalTokenMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovalTokenMetadata) ProtoMessage() {}

func (x *GovalTokenMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovalTokenMetadata.ProtoReflect.Descriptor instead.
func (*GovalTokenMetadata) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{4}
}

func (x *GovalTokenMetadata) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

// Metadata for the classroom. This is deprecated and should be removed
// hopefully soon.
type ReplToken_ClassroomMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ReplToken_ClassroomMetadata) Reset() {
	*x = ReplToken_ClassroomMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplToken_ClassroomMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplToken_ClassroomMetadata) ProtoMessage() {}

func (x *ReplToken_ClassroomMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplToken_ClassroomMetadata.ProtoReflect.Descriptor instead.
func (*ReplToken_ClassroomMetadata) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ReplToken_ClassroomMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReplToken_ClassroomMetadata) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Metadata for a repl that is only identified by its id.
type ReplToken_ReplID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// (Optional) See the comment for Repl.sourceRepl.
	SourceRepl string `protobuf:"bytes,2,opt,name=sourceRepl,proto3" json:"sourceRepl,omitempty"`
}

func (x *ReplToken_ReplID) Reset() {
	*x = ReplToken_ReplID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplToken_ReplID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplToken_ReplID) ProtoMessage() {}

func (x *ReplToken_ReplID) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplToken_ReplID.ProtoReflect.Descriptor instead.
func (*ReplToken_ReplID) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ReplToken_ReplID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReplToken_ReplID) GetSourceRepl() string {
	if x != nil {
		return x.SourceRepl
	}
	return ""
}

type ReplToken_Presenced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BearerID   uint32 `protobuf:"varint,1,opt,name=bearerID,proto3" json:"bearerID,omitempty"`
	BearerName string `protobuf:"bytes,2,opt,name=bearerName,proto3" json:"bearerName,omitempty"`
}

func (x *ReplToken_Presenced) Reset() {
	*x = ReplToken_Presenced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_client_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplToken_Presenced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplToken_Presenced) ProtoMessage() {}

func (x *ReplToken_Presenced) ProtoReflect() protoreflect.Message {
	mi := &file_client_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplToken_Presenced.ProtoReflect.Descriptor instead.
func (*ReplToken_Presenced) Descriptor() ([]byte, []int) {
	return file_client_proto_rawDescGZIP(), []int{3, 2}
}

func (x *ReplToken_Presenced) GetBearerID() uint32 {
	if x != nil {
		return x.BearerID
	}
	return 0
}

func (x *ReplToken_Presenced) GetBearerName() string {
	if x != nil {
		return x.BearerName
	}
	return ""
}

var File_client_proto protoreflect.FileDescriptor

var file_client_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x05,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x22, 0x2b, 0x0a, 0x0b, 0x43, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x50, 0x4c, 0x10, 0x02,
	0x22, 0x35, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x22, 0x87, 0x07, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x69, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03,
	0x69, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x78,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6c, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x49,
	0x44, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x3b, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3f, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x1a, 0x38, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6c, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x1a, 0x47, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x0a, 0x57,
	0x69, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x01, 0x1a, 0x02, 0x08, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2b, 0x0a, 0x12, 0x47, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x42, 0x06,
	0x5a, 0x04, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_proto_rawDescOnce sync.Once
	file_client_proto_rawDescData = file_client_proto_rawDesc
)

func file_client_proto_rawDescGZIP() []byte {
	file_client_proto_rawDescOnce.Do(func() {
		file_client_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_proto_rawDescData)
	})
	return file_client_proto_rawDescData
}

var file_client_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_client_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_client_proto_goTypes = []interface{}{
	(ResourceLimits_Cachability)(0),     // 0: api.ResourceLimits.Cachability
	(ReplToken_Persistence)(0),          // 1: api.ReplToken.Persistence
	(ReplToken_WireFormat)(0),           // 2: api.ReplToken.WireFormat
	(*Repl)(nil),                        // 3: api.Repl
	(*ResourceLimits)(nil),              // 4: api.ResourceLimits
	(*Permissions)(nil),                 // 5: api.Permissions
	(*ReplToken)(nil),                   // 6: api.ReplToken
	(*GovalTokenMetadata)(nil),          // 7: api.GovalTokenMetadata
	(*ReplToken_ClassroomMetadata)(nil), // 8: api.ReplToken.ClassroomMetadata
	(*ReplToken_ReplID)(nil),            // 9: api.ReplToken.ReplID
	(*ReplToken_Presenced)(nil),         // 10: api.ReplToken.Presenced
	(*timestamppb.Timestamp)(nil),       // 11: google.protobuf.Timestamp
}
var file_client_proto_depIdxs = []int32{
	0,  // 0: api.ResourceLimits.cache:type_name -> api.ResourceLimits.Cachability
	11, // 1: api.ReplToken.iat:type_name -> google.protobuf.Timestamp
	11, // 2: api.ReplToken.exp:type_name -> google.protobuf.Timestamp
	1,  // 3: api.ReplToken.persistence:type_name -> api.ReplToken.Persistence
	3,  // 4: api.ReplToken.repl:type_name -> api.Repl
	9,  // 5: api.ReplToken.id:type_name -> api.ReplToken.ReplID
	8,  // 6: api.ReplToken.classroom:type_name -> api.ReplToken.ClassroomMetadata
	4,  // 7: api.ReplToken.resourceLimits:type_name -> api.ResourceLimits
	2,  // 8: api.ReplToken.format:type_name -> api.ReplToken.WireFormat
	10, // 9: api.ReplToken.presenced:type_name -> api.ReplToken.Presenced
	5,  // 10: api.ReplToken.permissions:type_name -> api.Permissions
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_client_proto_init() }
func file_client_proto_init() {
	if File_client_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_client_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovalTokenMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplToken_ClassroomMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplToken_ReplID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_client_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplToken_Presenced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_client_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ReplToken_Repl)(nil),
		(*ReplToken_Id)(nil),
		(*ReplToken_Classroom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_proto_goTypes,
		DependencyIndexes: file_client_proto_depIdxs,
		EnumInfos:         file_client_proto_enumTypes,
		MessageInfos:      file_client_proto_msgTypes,
	}.Build()
	File_client_proto = out.File
	file_client_proto_rawDesc = nil
	file_client_proto_goTypes = nil
	file_client_proto_depIdxs = nil
}
